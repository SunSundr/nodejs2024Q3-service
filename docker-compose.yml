services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      PORT: ${PORT}
      DATABASE_HOST: ${DATABASE_CONTAINER_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
      TYPEORM_DROPSCHEMA: ${TYPEORM_DROPSCHEMA}
      TYPEORM_LOGGING: ${TYPEORM_LOGGING}
      TYPEORM_SYNCHRONIZE: ${TYPEORM_SYNCHRONIZE}
    container_name: ${CONTAINER_NAME_APP}
    restart: always
    env_file: .env
    ports:
      - "${PORT}:${PORT}"
    volumes:
      - ./src:/app/src
      # - .:/app
      - /app/node_modules
    depends_on:
      - postgres
    networks:
      - app-network

  postgres:
    image: postgres:17.1-alpine
    container_name: ${CONTAINER_NAME_DB}
    restart: always
    env_file: .env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA}
    ports:
      - "${POSTGRES_PORT}:${DATABASE_PORT}"
    volumes:
      - ./src/typeorm/init.sh:/docker-entrypoint-initdb.d/init.sh
      - postgres-data:/var/lib/postgresql/data
      - postgres-logs:/var/log/postgresql
    command: ["bash", "-c", "chmod +x /docker-entrypoint-initdb.d/init.sh && docker-entrypoint.sh postgres"]
    networks:
      - app-network

volumes:
  postgres-data:
  postgres-logs:

networks:
  app-network:
    driver: bridge